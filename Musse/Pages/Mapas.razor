@page "/Mapas"
@inject IDbContextFactory<MuseoingContext> DbFactory

@if (Mapa.Base64 is not null)
{
    <h1>Mapas</h1>

    <InputFile OnChange="Guardar" />

    <img src="data:@Mapa.Tipo;base64,@Mapa.Base64" />

    @if(MapasPrevios.MapasPrevios is not null)
    {
        @foreach (MapaViewModel mapas in MapasPrevios.MapasPrevios)
        {
            <br>
        }
    }
}
else
{
    <label>Cargando...</label>
}

@code {

    private class MapaViewModel 
    {
        public string Base64 { get; set; }
        public string Tipo { get; set; }
        public string Nombre { get; set; }
    }

    private class MapasPreviosViewModel
    {
        public List<MapaViewModel> MapasPrevios { get;set; } 
    }

    private MapaViewModel Mapa { get; set; } = new();
    private MapasPreviosViewModel MapasPrevios { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        MapaActual? mapa = await db.Mapas.SingleOrDefaultAsync();

        if (mapa is not null)
        {
            Mapa.Base64 = mapa.MapaBase64;
            Mapa.Tipo = mapa.Tipo;
            Mapa.Nombre = mapa.Nombre;
        }
    }

    private async void Guardar(InputFileChangeEventArgs e)
    {
        using var db = DbFactory.CreateDbContext();

        string mapaBase = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        MapaActual? mapa = await db.Mapas.SingleOrDefaultAsync();

        if (mapa is not null)
        {
            mapa.Tipo = e.File.ContentType;
            mapa.Nombre = e.File.Name;
            mapa.MapaBase64 = mapaBase;
        }
        else
        {
            MapaActual mapaActual = new()
            {
                MapaBase64 = mapaBase,
                Nombre = e.File.Name,
                Tipo = e.File.ContentType
            };

            db.Mapas.Add(mapaActual);
        }
        db.SaveChanges();

        Mapa.Base64 = mapa.MapaBase64;
        Mapa.Tipo = mapa.Tipo;
        Mapa.Nombre = mapa.Nombre;
    }
}
