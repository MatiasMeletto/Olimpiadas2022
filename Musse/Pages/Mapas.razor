@page "/Mapas"
@inject IDbContextFactory<MuseoingContext> DbFactory


<h1>Mapas</h1>
<div class="container-fluid">
<a class="text-black">Aqui se pueden subir las actualizaciones de los mapas</a>
</div>
<button @onclick="CambiarEstado" hidden=@cargandoImagen >Subir/Cambiar imagen</button>
@if (cargandoImagen)
{
    <button @onclick="EliminarImagen" disabled="@existeMapa">Eliminar imagen actual</button>
    <InputFile OnChange="Guardar" />
    <button @onclick="Reemplazar" >Subir</button>
}
@if (mapaView.Base64 is not null)
{
    <br>
    <br>
    <img class="max" src="data:@mapaView.Tipo;base64,@mapaView.Base64" hidden="@existeMapa" />
}
<br>
<br>
<br>
@if(mapasPreviosView.MapasPrevios is not null)
{
    @foreach (MapaViewModel m in mapasPreviosView.MapasPrevios)
    {
        <img class="max" src="data:@m.Tipo;base64,@m.Base64" />
    }
}

@code {

    private class MapaViewModel
    {
        public string Base64 { get; set; }
        public string Tipo { get; set; }
        public string Nombre { get; set; }
    }

    private class MapasPreviosViewModel
    {
        public List<MapaViewModel> MapasPrevios { get; set; } = new List<MapaViewModel>();
    }

    private MapaViewModel mapaView { get; set; } = new();
    private MapaActual[]? mapasPrevios;
    private MapasPreviosViewModel mapasPreviosView { get; set; } = new();
    private bool cargandoImagen;
    private bool existeMapa;

    protected override async Task OnInitializedAsync()
    { 
        cargandoImagen = false;

        using var db = DbFactory.CreateDbContext();

        //Esto revisa si hay un mapa actual, lo muestra en primera plana e indica mediante la variable "existeMapa" que existe(la cual despues se usa para deshabilitar el boton eliminar en vista)
        MapaActual? mapaActual = await db.Mapas.Where(c => c.Actual == true).SingleOrDefaultAsync();

        if (mapaActual is not null)
        {
            mapaView.Base64 = mapaActual.MapaBase64;
            mapaView.Tipo = mapaActual.Tipo;
            mapaView.Nombre = mapaActual.Nombre;
            existeMapa = false;
        }
        else
        {
            existeMapa = true;
        }

        //Esto busca todos los mapas que no sean actuales en la base de datos y los guarda en una lista de mapas previos para la vista
        mapasPrevios = await db.Mapas.Where(c => c.Actual == false).ToArrayAsync();

        foreach(var mapaPrevio in mapasPrevios)
        {
            MapaViewModel mapaViewModel = new MapaViewModel()
            {
                Nombre = mapaPrevio.Nombre,
                Tipo = mapaPrevio.Tipo,
                Base64 = mapaPrevio.MapaBase64
            };

            mapasPreviosView.MapasPrevios.Add(mapaViewModel);
        }
    }

    //Este metodo "Guardar" guarda lo que se ingresa desde la vista en el viewModel pero no lo carga en la base de datos
    private async void Guardar(InputFileChangeEventArgs e)
    {
        string mapaBase = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        mapaView.Base64 = mapaBase;
        mapaView.Tipo = e.File.ContentType;
        mapaView.Nombre = e.File.Name;
    }

    //Este metodo "Reemplazar" busca en la base de datos si ya hay un mapa activo y lo marca como previo o desactualizado y acto seguido sube el actual
    private async void Reemplazar()
    {
        using var db = DbFactory.CreateDbContext();

        MapaActual? mapa = await db.Mapas.Where(c => c.Actual == true).SingleOrDefaultAsync();

        if (mapa is not null)
        {
            mapa.Actual = false;
        }

        MapaActual mapaActual = new MapaActual()
        {
            Tipo = mapaView.Tipo,
            Nombre = mapaView.Nombre,
            MapaBase64 = mapaView.Base64,
            Actual = true
        };

        db.Mapas.Add(mapaActual);
        db.SaveChanges();

        mapasPrevios = await db.Mapas.Where(c => c.Actual == false).ToArrayAsync();

        foreach (var mapaPrevio in mapasPrevios)
        {
            MapaViewModel mapaViewModel = new MapaViewModel()
            {
                Nombre = mapaPrevio.Nombre,
                Tipo = mapaPrevio.Tipo,
                Base64 = mapaPrevio.MapaBase64
            };

            mapasPreviosView.MapasPrevios.Add(mapaViewModel);
        }
        CambiarEstado();
        existeMapa = false;
        StateHasChanged();
    }

    private void CambiarEstado()
    {
        cargandoImagen = !cargandoImagen;
    }

    private async void EliminarImagen()
    {
        using var db = DbFactory.CreateDbContext();

        MapaActual? mapaActualViejo = await db.Mapas.Where(c => c.Actual == true).SingleOrDefaultAsync();

        if (mapaActualViejo is not null)
        {
            db.Remove(mapaActualViejo);

            MapaActual? mapaActualNuevo = await db.Mapas.Where(c => c.Actual == false).OrderBy(m => m.MapaActualId).LastOrDefaultAsync();

            if (mapaActualNuevo is not null)
            {
                mapaActualNuevo.Actual = true;
                mapaView.Base64 = mapaActualNuevo.MapaBase64;
                mapaView.Nombre = mapaActualNuevo.Nombre;
                mapaView.Tipo = mapaActualNuevo.Tipo;
            }
            else
            {
                mapaView = new();
                existeMapa = true;
            }
        }
        if (mapasPrevios is not null)
        {
            if (mapasPrevios.Count() > 0)
            {
                Array.Clear(mapasPrevios, 0, mapasPrevios.Length);
                mapasPrevios = await db.Mapas.Where(c => c.Actual == false).ToArrayAsync();
            }
        }
        db.SaveChanges();
        CambiarEstado();
        StateHasChanged();
    }
}
