@page "/"
@using Musse.Helpers

<InputFile OnChange="Guardar" />

<h2> @Prueba.Prueba </h2>

@code {

    private class PruebaViewModel 
    {
        public string Prueba { get; set; }
    }

    private PruebaViewModel Prueba { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var contextOptions = new DbContextOptionsBuilder<MuseoingContext>()
            .UseSqlServer(@"Server=(localdb)\mssqllocaldb;Database=aspnet-53bc9b9d-9d6a-45d4-8429-2a2761773502;Trusted_Connection=True;MultipleActiveResultSets=true")
            .Options;

        using var db = new MuseoingContext(contextOptions);

        MapaActual? mapa = await db.Mapas.SingleOrDefaultAsync();

        if (mapa is not null)
        {
            Prueba.Prueba = mapa.MapaBase64;
        }
    }

    private async void Guardar(InputFileChangeEventArgs e)
    {
        var contextOptions = new DbContextOptionsBuilder<MuseoingContext>()
            .UseSqlServer(@"Server=(localdb)\mssqllocaldb;Database=aspnet-53bc9b9d-9d6a-45d4-8429-2a2761773502;Trusted_Connection=True;MultipleActiveResultSets=true")
            .Options;

        using var db = new MuseoingContext(contextOptions);

        string mapaBase = Base64Helper.StreamToBase64(e.File.OpenReadStream());

        MapaActual? mapa = await db.Mapas.SingleOrDefaultAsync();

        if (mapa is not null)
        {
            mapa.Tipo = e.File.ContentType;
            mapa.Nombre = e.File.Name;
            mapa.MapaBase64 = mapaBase;
        }
        else
        {
            MapaActual mapaActual = new()
            {
                MapaBase64 = mapaBase
            };

            db.Mapas.Add(mapaActual);
        }
        db.SaveChanges();
    }
}